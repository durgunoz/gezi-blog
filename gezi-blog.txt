docker postgre
axios veri çağırma
swagger ui CORS
vite - front

ilişkisel veri tabanı --> mssql
Controller'larla iletmek için dto sistemi
ve oto mapping

Bir Author birçok Post yazabilir.

Post (N) --- (N) Category

Bir Post'un birçok Tagi olabilir (ve tersine).

Bir Post'un birçok Comment'i olabilir.


giriş yapınca : admin, author, reader

admin'de reader'ı author yapıcak yetki
author ve admin post ekleyebili



stateless token kullanıyor --> geçerlilik süresi var

token clien'te silinirse başkası hala tokeni kullanabilir --> güvensizlik ama başlangıçta kullanılıyor.


CHATBOT
---
llama:3b --> basic model sadece (ingilizce)
api key gerekmiyor ve free









http://localhost:5229/api/Post?Title=Ege

{"id":1,"title":"Ege'de Saklı Kalmış Koylar","content":"Bu yaz tatilinde Ege kıyılarında keşfettiğim koylar beni gerçekten büyüledi...","createdAt":"2025-03-11T00:00:00","imageUrl":null,"isPublished":false,"viewCount":0,"author":{"id":2,"name":"Ayşe Yıldız"},"categories":[{"id":4,"name":"Tarihi"},{"id":5,"name":"Cruise"}],"tags":[],"comments":[]}]





berk@test.com
123456Emre.!


enes@test.com
123456Emre.!


kullanıcı

emre@test.com
123456Emre.!


erdem123@test.com
123456Emre.!


Chatbot Yapısı
Chatbot sistemi, gelen kullanıcı mesajlarına yanıt vermek için belirli katmanlardan oluşan bir yapıya sahiptir. İş akışı aşağıdaki şekilde ilerler:

1. Kullanıcı Girişi
Kullanıcı bir mesaj gönderir (örneğin: “Yazılarımı göster”).

Bu mesaj HTTP üzerinden sunucuya iletilir (genellikle POST /api/chat gibi bir endpoint'e).

2. Controller Katmanı
Mesaj ChatController tarafından alınır.

Controller, mesajı işlerken bir servis sınıfına yönlendirir.

Bu noktada mesajın içeriği ve kullanıcı bilgisi işlenmek üzere ChatService’e aktarılır.

3. Servis Katmanı
ChatService, mesajı analiz eder.

Ne tür bir istek olduğunu belirler (örneğin: selamlaşma mı, yazı listeleme mi, öneri mi?).

Gerekirse repository katmanından veri çeker.

4. Repository Katmanı
Veritabanı işlemleri bu katmanda gerçekleşir.

Örneğin, “Kullanıcının yazılarını getir” gibi istekler burada gerçekleştirilir.

Elde edilen veriler, servis katmanına döndürülür.

5. Cevap Oluşturma
ChatService, gelen veriye göre bir cevap üretir.

Cevap sade bir metin olabilir veya dinamik olarak oluşturulabilir.

Bu cevap tekrar controller’a iletilir.

6. Yanıtın Dönülmesi
Controller, cevabı kullanıcıya JSON olarak döner.

Örnek: { "reply": "Toplam 3 yazınız var: A, B, C" }

Bu yapı sayesinde sistem:

Genişletilebilir,

Test edilebilir,

Bakımı kolay bir chatbot altyapısı sunar.





